'''题目描述 
快递业务范围有 N 个站点，A 站点与 B 站点可以中转快递，则认为 A-B 站可达， 如果 A-B 可达，B-C 可达，则 A-C 可达。 现在给 N 个站点编号 0、1、…n-1，用 s[i][j]表示 i-j 是否可达， s[i][j] = 1表示 i-j可达，s[i][j] = 0表示 i-j 不可达。 现用二维数组给定N个站点的可达关系，请计算至少选择从几个主站点出发，才能可达所有站点（覆盖所有站点业务）。 说明：s[i][j]与s[j][i]取值相同。 
 
输入描述 
第一行输入为 N，N表示站点个数。 1 < N < 10000 之后 N 行表示站点之间的可达关系，第i行第j个数值表示编号为i和j之间是否可达。 
 
输出描述 
输出站点个数，表示至少需要多少个主站点。 
 
用例 
输入
4 
1 1 1 1 
1 1 1 0 
1 1 1 0 
1 0 0 1
输出
1
说明选择 0 号站点作为主站点， 0 站点可达其他所有站点， 所以至少选择 1 个站点作为主站才能覆盖所有站点业务。

输入
4 
1 1 0 0 
1 1 0 0 
0 0 1 0 
0 0 0 1
输出
3
说明选择 0 号站点可以覆盖 0、1 站点， 选择 2 号站点可以覆盖 2 号站点， 选择 3 号站点可以覆盖 3 号站点， 所以至少选择 3 个站点作为主站才能覆盖所有站点业务。
'''

# 求连通分量的个数
n=int(input())
q=[0]*n
for i in range(n): q[i]=i
def find(x):
    if q[x]!=x:q[x]=find(q[x])
    return q[x]
count = n
def merge(a,b):
    global count
    fa,fb=find(a),find(b)
    if fa!=fb:
        q[fa]=fb
        count-=1
g=[[0]*n for i in range(n)]
for i in range(n):
    r=[int(x) for x in input().split()]
    # 1和2连通，2必然也和1连通，所以只需要计算每个数字和后面数字的连通情况
    for j in range(i+1,n):
        g[i][j]=r[j]
        if g[i][j]==1:
            merge(i,j)
print(count)