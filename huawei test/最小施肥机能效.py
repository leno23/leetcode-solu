'''
题目描述 
某农场主管理了一大片果园，fields[i] 表示不同果林的面积，单位: (m，现在要为所有的果林施肥且必须在n天之内完成，否则影响收成。 
小布是果林的工作人员，他每次选择一片果林进行施肥，且一片果林施肥完后当天不再进行施肥作业。 假设施肥机的能效为 k，单位: (m/day) ，请问至少租赁能效 k 为多少的施机才能确保不影响收成? 
如果无法完成施肥任务，则返回 -1。 
输入描述 
第一行输入为m和n，m表示 fields 中的元素个数，n 表示施肥任务必须在n天内 (含n天)完成； 第二行输入为 fields， fields[i] 表示果林i的面积，单位: (m) 
输出描述 
对于每组数据，输出最小施肥机的能效 (k)，无多余空格 
 
 备注： 1 <= fields.length <= 10^4 1 <= n <= 10^9 1 <= fields[i] <= 10^9 
 
示例 1 
输入： 
5 7
5 7 9 15 10
输出： 
9
 
 说明： 当能效k为9时 fields[o] 面积5小于能效9，需要1天可以完成 fields[1] 面积7小于能效9，需要1天可以完成 fields[2] 面积9小于等于能效9，需要1天可以完成 fields[3] 面积15大于能效9，需要2天可以完成 fields[4] 面积10大于能效9，需要2天可以完成 共需要7天，不会影响收成。 
 
示例 2 
输入： 
3 1
2 3 4
输出： 
-1
 
 说明： 由于一天最多完成一片果林的施肥，无论k为多少都至少需要3天才能完成施肥，因此返回 -1。 
 
'''
'''
二分
能效越大，完成施肥的天数越少，存在单调性，假如从1到 n枚举 施肥机的能效，那么能不能完成施肥的序列为 0 0 0 1 1 1,
即存在一个最小能效，可以完成施肥
'''
n,m=[int(x) for x in input().split()]
A=[int(x) for x in input().split()]
mx=max(A)
# 能效为m时，施肥需要几天
def check(mid):
    r=0
    for x in A:
        r+= x//mid
        if x%mid: r+=1
    return r <=m
def sol():
    if m<n: return -1
    else:
        l,r=1,mx
        while l<r:
            mid=l+r>>1
            if not check(mid): l=mid+1
            else: r=mid
        return l
print(sol())