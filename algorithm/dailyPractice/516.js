/*
516. 最长回文子序列

给你一个字符串 s ，找出其中最长的回文子序列，并返回该序列的长度。
子序列定义为：不改变剩余字符顺序的情况下，删除某些字符或者不删除任何字符形成的一个序列。

示例 1：

输入：s = "bbbab"
输出：4
解释：一个可能的最长回文子序列为 "bbbb" 。

*/
var longestPalindromeSubseq = function (s) {
    const n = s.length;
    // dp[i][j]表示s下标从i到j的子字符串的最大回文字符
    const dp = Array(n)
        .fill()
        .map(() => Array(n).fill(0));
    // 由于需要找到子字符左右两边的下标位置，所以需要两层遍历
    for (let i = n - 1; i >= 0; i--) {
        dp[i][i] = 1; // 单个字符的最大回文字符为1
        let s1 = s[i]; // 记录首字符
        for (let j = i + 1; j < n; j++) {
            let s2 = s[j]; // 记录末尾字符
            if (s1 == s2) {
                // 相等，则可以构成回文字符
                // 最大长度是 下标在i+1,j-1之间字符的最大回文字符长度 + 2
                dp[i][j] = dp[i + 1][j - 1] + 2;
            } else {
                // 不相等，不能构成回文字符
                // 此时最大长度为 不含头尾的两个字符的最大回文字符的最大值
                dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);
            }
        }
    }
    // 返回从0到n-1下标对应字符，即s 的最大回文字符长度
    return dp[0][n - 1];
};
