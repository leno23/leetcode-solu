/*
405. 数字转换为十六进制数
给定一个整数，编写一个算法将这个数转换为十六进制数。对于负整数，我们通常使用 
补码运算 方法。

注意:
十六进制中所有字母(a-f)都必须是小写。
十六进制字符串中不能包含多余的前导零。如果要转化的数为0，那么以单个字符'0'来表示；
对于其他情况，十六进制字符串中的第一个字符将不会是0字符。 
给定的数确保在32位有符号整数范围内。
不能使用任何由库提供的将数字直接转换或格式化为十六进制的方法。

*/
/**
 * @param {number} num
 * @return {string}
 */
// 32位整数对应16进制8位
// 每4个二进制位对应一个16进制位
// 所以，数字逐4位从右移动，使用num & 0xf取到低四位的值
// 转化成16进制数，然后从低位到高位进行拼接，最终返回结果
var toHex = function (num) {
    if (num == 0) return "0";
    let hex = "0123456789abcdef",
        ans = "";
    while (num && ans.length < 8) {
        ans = hex[num & 0xf] + ans;
        num >>= 4;
    }
    return ans;
};
